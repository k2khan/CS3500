1./ Hamad Khan

2./ This program doesn't work when it is loaded at 0x1000 because the program is trying to load from a program's already stored instructions. This causes interference, which we talked about in lecture is not allowed.

3./ 
movl	($0x1100),	%eax
movl	($0x1104),	%ebx
movl	%eax,		($0x1104)
movl	%ebx,		($0x1100)

4./ 
Partition 1: Starting: 0x0, Ending: 0x1000
Partition 2: Starting: 0x1001, Ending: 0x2002
Partition 3: Starting: 0x2003, Ending: 0x3004
Partition 4: Starting: 0x3005, Ending: 0x4006

5./ Jumps to $0x1234 (since $0x1234 is moved to $0x26, the destination of jmp)

6./ The program does not need to be rewritten. This is because when using base and limit registers, every time a "process references memory to either fetch an instruction or write a data word, the CPU hardware automatically adds the base value to the address generated by the process before sending the address out on the memory bus. Simultaneously, it checks whether the address offered is equal to or greater
than the value in the limit register, in which case a fault is generated and the access is aborted."

Essentially, if the base and limit were 0 and 1000 respectively, the hardware would treat the program from question 2 as 
movl	($0x1100),	%eax
movl	($0x1104),	%ebx
movl	%eax,		($0x1104)
movl	%ebx,		($0x1100)


7./ Is this not the same answer as 6?

8./ 
This would be the original program. Currently, 1000 bytes are not in use.
------
//////
Prog B
Prog B
Prog A
------

This is the program after memory is freed up. We would now have 1000 + 1000 bytes available, so a grand total of 2000 bytes available for use.
------
//////
Prog B
Prog B
//////
------

9./ The operator most likely can't execute program C because of the areas that the memory is available. Currently, 2 blocks of 1000 byte memory are available, but each block is located at different locations. The OS would need a way to manage memory such that it is available contiguously, but right now, it is available seperately.

10./ We could use swapping. Swapping consists of bringing in each process in its entirety, running it for a while, and putting it back on the disk. We could do this for program B and program C, so that each program is swapped and thus is able to run.